#!/bin/bash
#
# Create a backup commit in the current repository. This commit is like a normal commit, but is created in a temporary branch, and should be
# upload to a specific temporary remote (named 'my_tmp_repo'). The commit message is 'tmp(auto-backup): $(date)'. Add all file contents to this
# commit.
#
# The commit is created in a temporary branch. A branch is considered temporary if it starts with 'tmp.$(git config user.name).'
# If there is no temporary branch, this script will create one with the name 'tmp.$(git config user.name).autogenerated.doNotUse' if the user allows.
#
# This script automatically checkouts to the temporary branch, and creates the temporary commit if there are files that need to be tracked
#
# See the 'lib/tmp_branch.sh' script for more information


set -e


current_dir=$(realpath -m -- "$0/../")
source "${current_dir}/lib/tmp_branch.sh"


# Only needs to backup if there are files that need to be tracked
if  [[ $(git status --short) != '' ]]; then
	user_name=$(git config user.name)

	# Gets the temporary branch name in the local repository and checkouts to it. If not found, creates a new one. Search for
	# a temporary branch in the remotes and use its names to create the local temporary branch. If not found, creates a new
	# one with the name 'tmp.$user_name.autogenerated.doNotUse'

	tmp_branches_name=($(get_local_tmp_branch_name))
	tmp_branch=${tmp_branches_name[0]}

	if [[ "$tmp_branch" == '' ]]; then
		# Try to use the same name of a temporary branch in the remote list
		tmp_branches_name=($(get_remote_tmp_branch_name))
		tmp_branch=${tmp_branches_name[0]}

		# If not found a temporary branch in the remotes, create a new one with a custom name
		if [[ "$tmp_branch" == '' ]]; then
			tmp_branch="$automatic_tmp_branch_name"
		fi

		# Only creates the branch if the user allows, otherwise cancels the script
		read -r -p "Create a temporary branch with the name '$tmp_branch'? [y/N] " user_response

		if [[ "$user_response" =~ ^[yY]$ ]]; then
			git branch "$tmp_branch"

		else
			echo "No temporary branch created. Aborting..."
			exit 1
		fi
	fi

	git checkout "$tmp_branch"  # Need to checkouts before checking in the files

	# Creates the commit to track the changed files. Only creates the commit if there are files that need to be tracked
	# in the temporary branch
	if  [[ $(git status --short) != '' ]]; then
		git add .
		git commit -m "tmp(auto-backup): $(date '+%d %b %Y')"
	fi
fi
