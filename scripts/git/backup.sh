#!/bin/bash
#
# Create a backup commit in the current repository. This commit is like a normal commit, but is created in a temporary branch, and should be
# upload to a specific temporary remote (named 'my_tmp_repo'). The commit message is 'tmp(auto-backup): $(date)'. Add all file contents to
# this commit.
#
# The commit is created in a temporary branch. A branch is considered temporary if it starts with 'tmp.$(git config user.name).' If there is
# no temporary branch, this script will create one with the name 'tmp.$(git config user.name).autogenerated.doNotUse' if the user allows.
#
# This script automatically checkouts to the temporary branch, and creates the temporary commit if there are files that need to be tracked
#
# See the 'lib/tmp_branch.sh' script for more information


set -e


current_dir=$(realpath -m -- "$0/../")
source "${current_dir}/lib/tmp_branch.sh"


# Only needs to backup if there are files that need to be tracked
if  [[ $(git status --short) != '' ]]; then
	# If there are not a temporary branch, creates a new one.
	"${current_dir}/create_tmp_branch.sh"

	# Checkout to the temporary branch
	tmp_branches_name=($(get_local_tmp_branch_name))
	tmp_branch=${tmp_branches_name[0]}

	git checkout "$tmp_branch"  # Need to checkouts before add the files

	# Creates the commit to track the changed files. Only creates the commit if there are files that need to be tracked
	# in the temporary branch
	if  [[ $(git status --short) != '' ]]; then
		git add "$(git rev-parse --show-toplevel)"
		git commit -m "tmp(auto-backup): $(date '+%d %b %Y')"
	fi
fi
